'use client'\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Slider } from '@/components/ui/slider'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { cn } from '@/lib/utils'\nimport { \n  PlayIcon,\n  PauseIcon,\n  RotateCcwIcon,\n  VolumeXIcon,\n  Volume2Icon,\n  HeartIcon,\n  BrainIcon,\n  MoonIcon,\n  SunIcon,\n  FlowerIcon,\n  ZapIcon,\n  EyeIcon,\n  SparklesIcon\n} from 'lucide-react'\n\ninterface MeditationTimerProps {\n  className?: string\n}\n\ntype MeditationType = \n  | 'mindfulness' | 'loving_kindness' | 'body_scan' | 'breath_awareness'\n  | 'walking' | 'mantra' | 'visualization' | 'chakra' | 'sound_healing'\n\ntype MeditationFocus = \n  | 'stress_relief' | 'sleep' | 'anxiety' | 'focus' | 'spiritual_growth'\n  | 'healing' | 'manifestation' | 'self_love' | 'forgiveness' | 'clarity'\n\ninterface MeditationSession {\n  type: MeditationType\n  focus: MeditationFocus\n  duration: number\n  guided: boolean\n  music: boolean\n  bellInterval?: number\n}\n\nconst MEDITATION_TYPES = {\n  mindfulness: {\n    name: 'Mindfulness',\n    icon: BrainIcon,\n    description: 'Present moment awareness and observation',\n    color: 'text-blue-600'\n  },\n  loving_kindness: {\n    name: 'Loving Kindness',\n    icon: HeartIcon,\n    description: 'Cultivating compassion and love for self and others',\n    color: 'text-pink-600'\n  },\n  body_scan: {\n    name: 'Body Scan',\n    icon: ZapIcon,\n    description: 'Progressive relaxation through body awareness',\n    color: 'text-green-600'\n  },\n  breath_awareness: {\n    name: 'Breath Awareness',\n    icon: FlowerIcon,\n    description: 'Focusing on the natural rhythm of breathing',\n    color: 'text-teal-600'\n  },\n  visualization: {\n    name: 'Visualization',\n    icon: EyeIcon,\n    description: 'Guided imagery and mental visualization',\n    color: 'text-purple-600'\n  },\n  chakra: {\n    name: 'Chakra Meditation',\n    icon: SparklesIcon,\n    description: 'Balancing and aligning energy centers',\n    color: 'text-indigo-600'\n  }\n}\n\nconst MEDITATION_FOCUSES = {\n  stress_relief: { name: 'Stress Relief', icon: 'üåø' },\n  sleep: { name: 'Better Sleep', icon: 'üåô' },\n  anxiety: { name: 'Anxiety Relief', icon: '‚òÆÔ∏è' },\n  focus: { name: 'Focus & Clarity', icon: 'üéØ' },\n  spiritual_growth: { name: 'Spiritual Growth', icon: '‚ú®' },\n  healing: { name: 'Healing', icon: 'üíö' },\n  manifestation: { name: 'Manifestation', icon: 'üåü' },\n  self_love: { name: 'Self Love', icon: 'üíñ' },\n  forgiveness: { name: 'Forgiveness', icon: 'üïäÔ∏è' },\n  clarity: { name: 'Mental Clarity', icon: 'üß†' }\n}\n\nexport function MeditationTimer({ className }: MeditationTimerProps) {\n  const [session, setSession] = useState<MeditationSession>({\n    type: 'mindfulness',\n    focus: 'stress_relief',\n    duration: 10,\n    guided: false,\n    music: true,\n    bellInterval: 5\n  })\n  \n  const [isActive, setIsActive] = useState(false)\n  const [timeLeft, setTimeLeft] = useState(session.duration * 60)\n  const [isCompleted, setIsCompleted] = useState(false)\n  const [showSettings, setShowSettings] = useState(true)\n  const [volume, setVolume] = useState(50)\n  const [isMuted, setIsMuted] = useState(false)\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null)\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n\n  useEffect(() => {\n    setTimeLeft(session.duration * 60)\n  }, [session.duration])\n\n  useEffect(() => {\n    if (isActive && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft(time => {\n          if (time <= 1) {\n            setIsActive(false)\n            setIsCompleted(true)\n            playCompletionSound()\n            return 0\n          }\n          return time - 1\n        })\n      }, 1000)\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n  }, [isActive, timeLeft])\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const getProgress = () => {\n    const totalSeconds = session.duration * 60\n    return ((totalSeconds - timeLeft) / totalSeconds) * 100\n  }\n\n  const handleStart = () => {\n    setIsActive(true)\n    setShowSettings(false)\n    if (session.music && !isMuted) {\n      playBackgroundMusic()\n    }\n  }\n\n  const handlePause = () => {\n    setIsActive(false)\n    if (audioRef.current) {\n      audioRef.current.pause()\n    }\n  }\n\n  const handleReset = () => {\n    setIsActive(false)\n    setTimeLeft(session.duration * 60)\n    setIsCompleted(false)\n    setShowSettings(true)\n    if (audioRef.current) {\n      audioRef.current.pause()\n      audioRef.current.currentTime = 0\n    }\n  }\n\n  const playBackgroundMusic = () => {\n    // In a real app, you'd have actual audio files\n    // For now, we'll simulate with a placeholder\n    console.log('Playing background music...')\n  }\n\n  const playCompletionSound = () => {\n    // Play completion bell sound\n    console.log('Playing completion sound...')\n  }\n\n  const handleDurationChange = (value: number[]) => {\n    setSession({ ...session, duration: value[0] })\n  }\n\n  const handleVolumeChange = (value: number[]) => {\n    setVolume(value[0])\n    if (audioRef.current) {\n      audioRef.current.volume = value[0] / 100\n    }\n  }\n\n  if (isCompleted) {\n    return (\n      <div className={cn('space-y-6', className)}>\n        <Card className=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-6\">\n              <div className=\"text-6xl\">üßò‚Äç‚ôÄÔ∏è</div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-green-700 dark:text-green-300 mb-2\">\n                  Meditation Complete!\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  You've completed a {session.duration}-minute {MEDITATION_TYPES[session.type].name.toLowerCase()} session\n                </p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-3 gap-4 max-w-md mx-auto\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">{session.duration}</div>\n                    <div className=\"text-xs text-muted-foreground\">Minutes</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{MEDITATION_TYPES[session.type].name}</div>\n                    <div className=\"text-xs text-muted-foreground\">Type</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl\">{MEDITATION_FOCUSES[session.focus].icon}</div>\n                    <div className=\"text-xs text-muted-foreground\">{MEDITATION_FOCUSES[session.focus].name}</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-center space-x-4\">\n                  <Button onClick={handleReset}>\n                    New Session\n                  </Button>\n                  <Button variant=\"outline\">\n                    Save Session\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (!showSettings) {\n    return (\n      <div className={cn('space-y-6', className)}>\n        {/* Timer Display */}\n        <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-6\">\n              {/* Progress Circle */}\n              <div className=\"relative w-48 h-48 mx-auto\">\n                <svg className=\"w-48 h-48 transform -rotate-90\" viewBox=\"0 0 100 100\">\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"45\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    fill=\"none\"\n                    className=\"text-muted-foreground/20\"\n                  />\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"45\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"3\"\n                    fill=\"none\"\n                    strokeDasharray={`${2 * Math.PI * 45}`}\n                    strokeDashoffset={`${2 * Math.PI * 45 * (1 - getProgress() / 100)}`}\n                    className=\"text-indigo-600 transition-all duration-1000 ease-in-out\"\n                    strokeLinecap=\"round\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-mono font-bold\">\n                      {formatTime(timeLeft)}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground mt-1\">\n                      {Math.round(getProgress())}% complete\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Session Info */}\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold\">\n                  {MEDITATION_TYPES[session.type].name}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {MEDITATION_FOCUSES[session.focus].name} ‚Ä¢ {session.duration} minutes\n                </p>\n              </div>\n\n              {/* Controls */}\n              <div className=\"flex justify-center space-x-4\">\n                <Button\n                  onClick={isActive ? handlePause : handleStart}\n                  size=\"lg\"\n                  className=\"w-16 h-16 rounded-full\"\n                >\n                  {isActive ? (\n                    <PauseIcon className=\"h-6 w-6\" />\n                  ) : (\n                    <PlayIcon className=\"h-6 w-6\" />\n                  )}\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={handleReset}\n                  size=\"lg\"\n                  className=\"w-16 h-16 rounded-full\"\n                >\n                  <RotateCcwIcon className=\"h-6 w-6\" />\n                </Button>\n              </div>\n\n              {/* Volume Control */}\n              <div className=\"flex items-center justify-center space-x-4 max-w-xs mx-auto\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsMuted(!isMuted)}\n                >\n                  {isMuted ? (\n                    <VolumeXIcon className=\"h-4 w-4\" />\n                  ) : (\n                    <Volume2Icon className=\"h-4 w-4\" />\n                  )}\n                </Button>\n                <Slider\n                  value={[isMuted ? 0 : volume]}\n                  onValueChange={handleVolumeChange}\n                  max={100}\n                  step={1}\n                  className=\"flex-1\"\n                  disabled={isMuted}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <h4 className=\"font-medium\">Meditation Guidance</h4>\n              <div className=\"grid md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                <div>\n                  <strong>Focus:</strong> {MEDITATION_TYPES[session.type].description}\n                </div>\n                <div>\n                  <strong>Intention:</strong> {MEDITATION_FOCUSES[session.focus].name}\n                </div>\n                <div>\n                  <strong>Posture:</strong> Sit comfortably with spine straight\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header */}\n      <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <SparklesIcon className=\"h-6 w-6 text-indigo-600\" />\n            <span>Meditation Timer</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">\n            Create a peaceful meditation practice with guided timers and ambient sounds.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Session Setup */}\n      <Tabs defaultValue=\"type\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"type\">Meditation Type</TabsTrigger>\n          <TabsTrigger value=\"duration\">Duration & Settings</TabsTrigger>\n          <TabsTrigger value=\"focus\">Focus & Intention</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"type\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Choose Your Meditation Style</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {Object.entries(MEDITATION_TYPES).map(([key, type]) => {\n                  const Icon = type.icon\n                  return (\n                    <Button\n                      key={key}\n                      variant={session.type === key ? 'default' : 'outline'}\n                      onClick={() => setSession({ ...session, type: key as MeditationType })}\n                      className=\"h-auto p-4 flex flex-col items-start space-y-2\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <Icon className={cn('h-5 w-5', type.color)} />\n                        <span className=\"font-medium\">{type.name}</span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground text-left\">\n                        {type.description}\n                      </p>\n                    </Button>\n                  )\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"duration\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Duration & Audio Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Duration */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Duration</label>\n                  <Badge variant=\"outline\">{session.duration} minutes</Badge>\n                </div>\n                <Slider\n                  value={[session.duration]}\n                  onValueChange={handleDurationChange}\n                  min={1}\n                  max={60}\n                  step={1}\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>1 min</span>\n                  <span>30 min</span>\n                  <span>60 min</span>\n                </div>\n              </div>\n\n              {/* Quick Duration Buttons */}\n              <div className=\"grid grid-cols-4 gap-2\">\n                {[5, 10, 15, 20].map((duration) => (\n                  <Button\n                    key={duration}\n                    variant={session.duration === duration ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSession({ ...session, duration })}\n                  >\n                    {duration}m\n                  </Button>\n                ))}\n              </div>\n\n              {/* Audio Settings */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Background Music</label>\n                  <Button\n                    variant={session.music ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSession({ ...session, music: !session.music })}\n                  >\n                    {session.music ? 'On' : 'Off'}\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Guided Instructions</label>\n                  <Button\n                    variant={session.guided ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSession({ ...session, guided: !session.guided })}\n                  >\n                    {session.guided ? 'On' : 'Off'}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"focus\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Set Your Intention</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-3\">\n                {Object.entries(MEDITATION_FOCUSES).map(([key, focus]) => (\n                  <Button\n                    key={key}\n                    variant={session.focus === key ? 'default' : 'outline'}\n                    onClick={() => setSession({ ...session, focus: key as MeditationFocus })}\n                    className=\"h-auto p-3 flex items-center space-x-3\"\n                  >\n                    <span className=\"text-lg\">{focus.icon}</span>\n                    <span className=\"text-sm\">{focus.name}</span>\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Start Session */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold\">Ready to Begin</h3>\n              <p className=\"text-muted-foreground\">\n                {session.duration}-minute {MEDITATION_TYPES[session.type].name.toLowerCase()} \n                session focused on {MEDITATION_FOCUSES[session.focus].name.toLowerCase()}\n              </p>\n            </div>\n            \n            <Button onClick={handleStart} size=\"lg\" className=\"px-8\">\n              <PlayIcon className=\"h-5 w-5 mr-2\" />\n              Start Meditation\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}"