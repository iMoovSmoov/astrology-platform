'use client'\n\nimport React, { useState, useMemo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Input } from '@/components/ui/input'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { crystalDatabase, Crystal } from '@/lib/crystals/database'\nimport { ChakraType, CrystalUse } from '@/types/spiritual'\nimport { cn } from '@/lib/utils'\nimport { \n  SearchIcon,\n  FilterIcon,\n  HeartIcon,\n  ShieldIcon,\n  SparklesIcon,\n  ZapIcon,\n  EyeIcon,\n  CircleIcon,\n  StarIcon,\n  SunIcon,\n  MoonIcon\n} from 'lucide-react'\n\ninterface CrystalGuideProps {\n  className?: string\n}\n\nexport function CrystalGuide({ className }: CrystalGuideProps) {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [selectedChakra, setSelectedChakra] = useState<ChakraType | 'all'>('all')\n  const [selectedUse, setSelectedUse] = useState<CrystalUse | 'all'>('all')\n  const [selectedCrystal, setSelectedCrystal] = useState<Crystal | null>(null)\n  const [viewMode, setViewMode] = useState<'grid' | 'detail'>('grid')\n\n  const allCrystals = crystalDatabase.getAllCrystals()\n\n  const filteredCrystals = useMemo(() => {\n    let filtered = allCrystals\n\n    // Search filter\n    if (searchQuery) {\n      filtered = crystalDatabase.searchCrystals(searchQuery)\n    }\n\n    // Chakra filter\n    if (selectedChakra !== 'all') {\n      filtered = filtered.filter(crystal => \n        crystal.chakra_associations.includes(selectedChakra)\n      )\n    }\n\n    // Use filter\n    if (selectedUse !== 'all') {\n      filtered = filtered.filter(crystal => \n        crystal.uses.includes(selectedUse)\n      )\n    }\n\n    return filtered\n  }, [searchQuery, selectedChakra, selectedUse, allCrystals])\n\n  const getChakraColor = (chakra: ChakraType) => {\n    const colors = {\n      root: 'bg-red-500',\n      sacral: 'bg-orange-500',\n      solar_plexus: 'bg-yellow-500',\n      heart: 'bg-green-500',\n      throat: 'bg-blue-500',\n      third_eye: 'bg-indigo-500',\n      crown: 'bg-purple-500'\n    }\n    return colors[chakra]\n  }\n\n  const getChakraIcon = (chakra: ChakraType) => {\n    const icons = {\n      root: CircleIcon,\n      sacral: CircleIcon,\n      solar_plexus: SunIcon,\n      heart: HeartIcon,\n      throat: CircleIcon,\n      third_eye: EyeIcon,\n      crown: StarIcon\n    }\n    const Icon = icons[chakra]\n    return <Icon className=\"h-4 w-4\" />\n  }\n\n  const getUseIcon = (use: CrystalUse) => {\n    const icons = {\n      meditation: SparklesIcon,\n      healing: HeartIcon,\n      protection: ShieldIcon,\n      manifestation: StarIcon,\n      chakra_balancing: ZapIcon,\n      emotional_support: HeartIcon,\n      spiritual_growth: SparklesIcon,\n      energy_cleansing: ZapIcon,\n      dream_work: MoonIcon,\n      divination: EyeIcon\n    }\n    const Icon = icons[use] || CircleIcon\n    return <Icon className=\"h-4 w-4\" />\n  }\n\n  const handleCrystalSelect = (crystal: Crystal) => {\n    setSelectedCrystal(crystal)\n    setViewMode('detail')\n  }\n\n  const resetFilters = () => {\n    setSearchQuery('')\n    setSelectedChakra('all')\n    setSelectedUse('all')\n  }\n\n  if (viewMode === 'detail' && selectedCrystal) {\n    return (\n      <div className={cn('space-y-6', className)}>\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setViewMode('grid')}\n                >\n                  ‚Üê Back to Guide\n                </Button>\n                <div>\n                  <CardTitle className=\"text-2xl\">{selectedCrystal.name}</CardTitle>\n                  <p className=\"text-muted-foreground\">\n                    {selectedCrystal.alternative_names.join(', ')}\n                  </p>\n                </div>\n              </div>\n              <Badge variant=\"outline\">\n                {selectedCrystal.rarity}\n              </Badge>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Crystal Details */}\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Main Info */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Description */}\n            <Card>\n              <CardHeader>\n                <CardTitle>About {selectedCrystal.name}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  {selectedCrystal.description}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Properties Tabs */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                <Tabs defaultValue=\"metaphysical\">\n                  <TabsList className=\"grid w-full grid-cols-4\">\n                    <TabsTrigger value=\"metaphysical\">Metaphysical</TabsTrigger>\n                    <TabsTrigger value=\"healing\">Healing</TabsTrigger>\n                    <TabsTrigger value=\"emotional\">Emotional</TabsTrigger>\n                    <TabsTrigger value=\"spiritual\">Spiritual</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"metaphysical\" className=\"space-y-3 mt-4\">\n                    {selectedCrystal.metaphysical_properties.map((property, index) => (\n                      <div key={index} className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-sm\">{property}</span>\n                      </div>\n                    ))}\n                  </TabsContent>\n                  \n                  <TabsContent value=\"healing\" className=\"space-y-3 mt-4\">\n                    {selectedCrystal.healing_properties.map((property, index) => (\n                      <div key={index} className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-sm\">{property}</span>\n                      </div>\n                    ))}\n                  </TabsContent>\n                  \n                  <TabsContent value=\"emotional\" className=\"space-y-3 mt-4\">\n                    {selectedCrystal.emotional_properties.map((property, index) => (\n                      <div key={index} className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-sm\">{property}</span>\n                      </div>\n                    ))}\n                  </TabsContent>\n                  \n                  <TabsContent value=\"spiritual\" className=\"space-y-3 mt-4\">\n                    {selectedCrystal.spiritual_properties.map((property, index) => (\n                      <div key={index} className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-indigo-500 rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-sm\">{property}</span>\n                      </div>\n                    ))}\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n\n            {/* Care Instructions */}\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Cleansing Methods</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {selectedCrystal.cleansing_methods.map((method, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"mr-2 mb-2\">\n                        {method}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Charging Methods</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {selectedCrystal.charging_methods.map((method, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"mr-2 mb-2\">\n                        {method}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Info</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Colors</h4>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {selectedCrystal.color.map((color, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {color}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Element</h4>\n                  <Badge variant=\"outline\" className=\"capitalize\">\n                    {selectedCrystal.element}\n                  </Badge>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Hardness</h4>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {selectedCrystal.hardness} (Mohs scale)\n                  </span>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Crystal System</h4>\n                  <span className=\"text-sm text-muted-foreground capitalize\">\n                    {selectedCrystal.crystal_system}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Chakras */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Associated Chakras</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {selectedCrystal.chakra_associations.map((chakra, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <div className={cn('w-4 h-4 rounded-full', getChakraColor(chakra))} />\n                      <span className=\"text-sm capitalize\">{chakra.replace('_', ' ')}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Uses */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Primary Uses</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {selectedCrystal.uses.map((use, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      {getUseIcon(use)}\n                      <span className=\"text-sm capitalize\">{use.replace('_', ' ')}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Zodiac */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Zodiac Associations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedCrystal.zodiac_associations.map((sign, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {sign}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header */}\n      <Card className=\"bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-900/20 dark:to-teal-900/20\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <SparklesIcon className=\"h-6 w-6 text-emerald-600\" />\n            <span>Crystal Healing Guide</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">\n            Discover the healing properties and metaphysical meanings of crystals and gemstones.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FilterIcon className=\"h-5 w-5\" />\n            <span>Find Your Perfect Crystal</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search crystals by name...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Filter Tabs */}\n          <Tabs defaultValue=\"chakra\">\n            <TabsList>\n              <TabsTrigger value=\"chakra\">By Chakra</TabsTrigger>\n              <TabsTrigger value=\"use\">By Use</TabsTrigger>\n              <TabsTrigger value=\"intention\">By Intention</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"chakra\" className=\"mt-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  variant={selectedChakra === 'all' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedChakra('all')}\n                >\n                  All Chakras\n                </Button>\n                {(['root', 'sacral', 'solar_plexus', 'heart', 'throat', 'third_eye', 'crown'] as ChakraType[]).map((chakra) => (\n                  <Button\n                    key={chakra}\n                    variant={selectedChakra === chakra ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSelectedChakra(chakra)}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <div className={cn('w-3 h-3 rounded-full', getChakraColor(chakra))} />\n                    <span className=\"capitalize\">{chakra.replace('_', ' ')}</span>\n                  </Button>\n                ))}\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"use\" className=\"mt-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  variant={selectedUse === 'all' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedUse('all')}\n                >\n                  All Uses\n                </Button>\n                {(['meditation', 'healing', 'protection', 'manifestation', 'chakra_balancing', 'emotional_support'] as CrystalUse[]).map((use) => (\n                  <Button\n                    key={use}\n                    variant={selectedUse === use ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSelectedUse(use)}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    {getUseIcon(use)}\n                    <span className=\"capitalize\">{use.replace('_', ' ')}</span>\n                  </Button>\n                ))}\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"intention\" className=\"mt-4\">\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                {[\n                  { intention: 'love', icon: HeartIcon, color: 'text-pink-600' },\n                  { intention: 'protection', icon: ShieldIcon, color: 'text-blue-600' },\n                  { intention: 'abundance', icon: StarIcon, color: 'text-yellow-600' },\n                  { intention: 'healing', icon: HeartIcon, color: 'text-green-600' },\n                  { intention: 'meditation', icon: SparklesIcon, color: 'text-purple-600' },\n                  { intention: 'clarity', icon: EyeIcon, color: 'text-indigo-600' }\n                ].map((item) => {\n                  const Icon = item.icon\n                  return (\n                    <Button\n                      key={item.intention}\n                      variant=\"outline\"\n                      className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                      onClick={() => {\n                        const crystals = crystalDatabase.getCrystalsForIntention(item.intention)\n                        // Handle intention-based filtering\n                      }}\n                    >\n                      <Icon className={cn('h-6 w-6', item.color)} />\n                      <span className=\"capitalize\">{item.intention}</span>\n                    </Button>\n                  )\n                })}\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Reset Filters */}\n          {(searchQuery || selectedChakra !== 'all' || selectedUse !== 'all') && (\n            <Button variant=\"outline\" onClick={resetFilters} size=\"sm\">\n              Clear Filters\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredCrystals.map((crystal) => (\n          <Card \n            key={crystal.id} \n            className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n            onClick={() => handleCrystalSelect(crystal)}\n          >\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">{crystal.name}</CardTitle>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {crystal.rarity}\n                </Badge>\n              </div>\n              <div className=\"flex flex-wrap gap-1\">\n                {crystal.color.slice(0, 3).map((color, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {color}\n                  </Badge>\n                ))}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                {crystal.description}\n              </p>\n              \n              {/* Chakras */}\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs font-medium\">Chakras:</span>\n                <div className=\"flex space-x-1\">\n                  {crystal.chakra_associations.slice(0, 3).map((chakra, index) => (\n                    <div \n                      key={index} \n                      className={cn('w-3 h-3 rounded-full', getChakraColor(chakra))}\n                      title={chakra.replace('_', ' ')}\n                    />\n                  ))}\n                  {crystal.chakra_associations.length > 3 && (\n                    <span className=\"text-xs text-muted-foreground\">+{crystal.chakra_associations.length - 3}</span>\n                  )}\n                </div>\n              </div>\n              \n              {/* Primary Uses */}\n              <div className=\"flex flex-wrap gap-1\">\n                {crystal.uses.slice(0, 3).map((use, index) => (\n                  <div key={index} className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                    {getUseIcon(use)}\n                    <span className=\"capitalize\">{use.replace('_', ' ')}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredCrystals.length === 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <SparklesIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No crystals found</h3>\n              <p className=\"text-muted-foreground\">Try adjusting your search or filters</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}"