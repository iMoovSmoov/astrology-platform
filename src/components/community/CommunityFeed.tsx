'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { \n  CommunityPost, \n  PostComment, \n  UserProfile,\n  communityService,\n  authService \n} from '@/lib/auth/supabase'\nimport { cn, formatTimeAgo } from '@/lib/utils'\nimport { \n  HeartIcon,\n  MessageCircleIcon,\n  ShareIcon,\n  MoreHorizontalIcon,\n  StarIcon,\n  TrendingUpIcon,\n  UsersIcon,\n  PlusIcon,\n  ImageIcon,\n  ChartBarIcon,\n  SparklesIcon,\n  BookOpenIcon,\n  HelpCircleIcon\n} from 'lucide-react'\n\ninterface ExtendedCommunityPost extends CommunityPost {\n  user_profiles: {\n    username: string\n    display_name: string\n    avatar_url?: string\n    astrology_level: string\n  }\n  saved_charts?: {\n    name: string\n    description?: string\n    birth_data: any\n  }\n  isLiked?: boolean\n  comments?: PostComment[]\n}\n\ninterface CommunityFeedProps {\n  className?: string\n}\n\nexport function CommunityFeed({ className }: CommunityFeedProps) {\n  const [posts, setPosts] = useState<ExtendedCommunityPost[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [currentUser, setCurrentUser] = useState<UserProfile | null>(null)\n  const [newPostContent, setNewPostContent] = useState('')\n  const [newPostType, setNewPostType] = useState<'text' | 'question' | 'interpretation'>('text')\n  const [selectedTags, setSelectedTags] = useState<string[]>([])\n  const [showComments, setShowComments] = useState<Record<string, boolean>>({})\n  const [commentContent, setCommentContent] = useState<Record<string, string>>({})\n\n  useEffect(() => {\n    loadFeed()\n    loadCurrentUser()\n  }, [])\n\n  const loadCurrentUser = async () => {\n    const { user } = await authService.getCurrentUser()\n    if (user) {\n      const { data: profile } = await authService.getUserProfile(user.id)\n      setCurrentUser(profile)\n    }\n  }\n\n  const loadFeed = async () => {\n    setIsLoading(true)\n    try {\n      const { data, error } = await communityService.getCommunityFeed(20, 0)\n      if (data && !error) {\n        setPosts(data as ExtendedCommunityPost[])\n      }\n    } catch (error) {\n      console.error('Failed to load community feed:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleCreatePost = async () => {\n    if (!currentUser || !newPostContent.trim()) return\n\n    try {\n      const { data, error } = await communityService.createPost(currentUser.id, {\n        content: newPostContent,\n        post_type: newPostType,\n        tags: selectedTags,\n      })\n\n      if (data && !error) {\n        // Add new post to feed\n        const newPost: ExtendedCommunityPost = {\n          ...data,\n          user_profiles: {\n            username: currentUser.username,\n            display_name: currentUser.display_name,\n            avatar_url: currentUser.avatar_url,\n            astrology_level: currentUser.astrology_level,\n          },\n        }\n        setPosts([newPost, ...posts])\n        setNewPostContent('')\n        setSelectedTags([])\n      }\n    } catch (error) {\n      console.error('Failed to create post:', error)\n    }\n  }\n\n  const handleLikePost = async (postId: string) => {\n    if (!currentUser) return\n\n    try {\n      await communityService.likePost(postId, currentUser.id)\n      \n      // Update local state\n      setPosts(posts.map(post => {\n        if (post.id === postId) {\n          const isCurrentlyLiked = post.isLiked\n          return {\n            ...post,\n            isLiked: !isCurrentlyLiked,\n            likes_count: isCurrentlyLiked ? post.likes_count - 1 : post.likes_count + 1\n          }\n        }\n        return post\n      }))\n    } catch (error) {\n      console.error('Failed to like post:', error)\n    }\n  }\n\n  const handleAddComment = async (postId: string) => {\n    if (!currentUser || !commentContent[postId]?.trim()) return\n\n    try {\n      const { data, error } = await communityService.addComment(\n        postId,\n        currentUser.id,\n        commentContent[postId]\n      )\n\n      if (data && !error) {\n        // Update local state\n        setPosts(posts.map(post => {\n          if (post.id === postId) {\n            return {\n              ...post,\n              comments_count: post.comments_count + 1\n            }\n          }\n          return post\n        }))\n        \n        setCommentContent({ ...commentContent, [postId]: '' })\n      }\n    } catch (error) {\n      console.error('Failed to add comment:', error)\n    }\n  }\n\n  const toggleComments = (postId: string) => {\n    setShowComments({\n      ...showComments,\n      [postId]: !showComments[postId]\n    })\n  }\n\n  const getPostTypeIcon = (type: string) => {\n    switch (type) {\n      case 'chart_share': return <ChartBarIcon className=\"h-4 w-4\" />\n      case 'question': return <HelpCircleIcon className=\"h-4 w-4\" />\n      case 'interpretation': return <SparklesIcon className=\"h-4 w-4\" />\n      default: return <MessageCircleIcon className=\"h-4 w-4\" />\n    }\n  }\n\n  const getPostTypeColor = (type: string) => {\n    switch (type) {\n      case 'chart_share': return 'text-blue-600'\n      case 'question': return 'text-orange-600'\n      case 'interpretation': return 'text-purple-600'\n      default: return 'text-gray-600'\n    }\n  }\n\n  const getLevelBadgeVariant = (level: string) => {\n    switch (level) {\n      case 'professional': return 'default'\n      case 'advanced': return 'secondary'\n      case 'intermediate': return 'outline'\n      default: return 'outline'\n    }\n  }\n\n  const popularTags = [\n    'birth-chart', 'synastry', 'transits', 'mercury-retrograde', \n    'full-moon', 'new-moon', 'astrology-basics', 'compatibility',\n    'career-astrology', 'love-astrology', 'spiritual-growth'\n  ]\n\n  if (isLoading) {\n    return (\n      <div className={cn('space-y-6', className)}>\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-muted rounded-full\" />\n                <div className=\"space-y-2\">\n                  <div className=\"w-32 h-4 bg-muted rounded\" />\n                  <div className=\"w-24 h-3 bg-muted rounded\" />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"w-full h-4 bg-muted rounded\" />\n                <div className=\"w-3/4 h-4 bg-muted rounded\" />\n                <div className=\"w-1/2 h-4 bg-muted rounded\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Create Post */}\n      {currentUser && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Avatar>\n                <AvatarImage src={currentUser.avatar_url} />\n                <AvatarFallback>\n                  {currentUser.display_name.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">{currentUser.display_name}</h4>\n                <p className=\"text-sm text-muted-foreground\">Share your astrological insights</p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Post Type Selector */}\n            <Tabs value={newPostType} onValueChange={(value) => setNewPostType(value as any)}>\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"text\" className=\"flex items-center space-x-2\">\n                  <MessageCircleIcon className=\"h-4 w-4\" />\n                  <span>Share</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"question\" className=\"flex items-center space-x-2\">\n                  <HelpCircleIcon className=\"h-4 w-4\" />\n                  <span>Ask</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"interpretation\" className=\"flex items-center space-x-2\">\n                  <SparklesIcon className=\"h-4 w-4\" />\n                  <span>Interpret</span>\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            {/* Content Input */}\n            <Textarea\n              placeholder={\n                newPostType === 'question' ? 'Ask the community a question...' :\n                newPostType === 'interpretation' ? 'Share your interpretation or insight...' :\n                'Share your thoughts with the community...'\n              }\n              value={newPostContent}\n              onChange={(e) => setNewPostContent(e.target.value)}\n              className=\"min-h-[100px] resize-none\"\n            />\n\n            {/* Tags */}\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium\">Add tags:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {popularTags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant={selectedTags.includes(tag) ? 'default' : 'outline'}\n                    className=\"cursor-pointer text-xs\"\n                    onClick={() => {\n                      if (selectedTags.includes(tag)) {\n                        setSelectedTags(selectedTags.filter(t => t !== tag))\n                      } else {\n                        setSelectedTags([...selectedTags, tag])\n                      }\n                    }}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <ImageIcon className=\"h-4 w-4 mr-2\" />\n                  Image\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <ChartBarIcon className=\"h-4 w-4 mr-2\" />\n                  Chart\n                </Button>\n              </div>\n              <Button \n                onClick={handleCreatePost}\n                disabled={!newPostContent.trim()}\n              >\n                <PlusIcon className=\"h-4 w-4 mr-2\" />\n                Post\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Feed Posts */}\n      <div className=\"space-y-4\">\n        {posts.map((post) => (\n          <Card key={post.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar>\n                    <AvatarImage src={post.user_profiles.avatar_url} />\n                    <AvatarFallback>\n                      {post.user_profiles.display_name.charAt(0).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <h4 className=\"font-semibold\">{post.user_profiles.display_name}</h4>\n                      <Badge variant={getLevelBadgeVariant(post.user_profiles.astrology_level)} className=\"text-xs\">\n                        {post.user_profiles.astrology_level}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <span>@{post.user_profiles.username}</span>\n                      <span>•</span>\n                      <span>{formatTimeAgo(new Date(post.created_at))}</span>\n                      <div className={cn('flex items-center space-x-1', getPostTypeColor(post.post_type))}>\n                        {getPostTypeIcon(post.post_type)}\n                        <span className=\"capitalize\">{post.post_type.replace('_', ' ')}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <MoreHorizontalIcon className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {/* Post Content */}\n              <div className=\"prose prose-sm max-w-none\">\n                <p className=\"whitespace-pre-wrap\">{post.content}</p>\n              </div>\n\n              {/* Chart Preview (if chart_share) */}\n              {post.post_type === 'chart_share' && post.saved_charts && (\n                <Card className=\"bg-muted/50\">\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <ChartBarIcon className=\"h-8 w-8 text-blue-600\" />\n                      <div>\n                        <h5 className=\"font-medium\">{post.saved_charts.name}</h5>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {post.saved_charts.description || 'Birth chart shared'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Tags */}\n              {post.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-1\">\n                  {post.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      #{tag}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center justify-between pt-2 border-t\">\n                <div className=\"flex items-center space-x-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleLikePost(post.id)}\n                    className={cn(\n                      'flex items-center space-x-2',\n                      post.isLiked && 'text-red-600'\n                    )}\n                  >\n                    <HeartIcon className={cn('h-4 w-4', post.isLiked && 'fill-current')} />\n                    <span>{post.likes_count}</span>\n                  </Button>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => toggleComments(post.id)}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <MessageCircleIcon className=\"h-4 w-4\" />\n                    <span>{post.comments_count}</span>\n                  </Button>\n                  \n                  <Button variant=\"ghost\" size=\"sm\">\n                    <ShareIcon className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                {post.is_featured && (\n                  <Badge variant=\"default\" className=\"text-xs\">\n                    <StarIcon className=\"h-3 w-3 mr-1\" />\n                    Featured\n                  </Badge>\n                )}\n              </div>\n\n              {/* Comments Section */}\n              {showComments[post.id] && (\n                <div className=\"space-y-3 pt-4 border-t\">\n                  {/* Add Comment */}\n                  {currentUser && (\n                    <div className=\"flex items-start space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={currentUser.avatar_url} />\n                        <AvatarFallback className=\"text-xs\">\n                          {currentUser.display_name.charAt(0).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 space-y-2\">\n                        <Textarea\n                          placeholder=\"Add a comment...\"\n                          value={commentContent[post.id] || ''}\n                          onChange={(e) => setCommentContent({\n                            ...commentContent,\n                            [post.id]: e.target.value\n                          })}\n                          className=\"min-h-[60px] resize-none\"\n                        />\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleAddComment(post.id)}\n                          disabled={!commentContent[post.id]?.trim()}\n                        >\n                          Comment\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Comments List */}\n                  <div className=\"space-y-3\">\n                    {/* Mock comments - would load from API */}\n                    <div className=\"flex items-start space-x-3\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarFallback className=\"text-xs\">JD</AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"bg-muted rounded-lg p-3\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <span className=\"font-medium text-sm\">Jane Doe</span>\n                            <span className=\"text-xs text-muted-foreground\">2h ago</span>\n                          </div>\n                          <p className=\"text-sm\">Great insight! I've been experiencing similar transits.</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Load More */}\n      <div className=\"text-center\">\n        <Button variant=\"outline\" onClick={loadFeed}>\n          Load More Posts\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n// Helper function for time formatting\nfunction formatTimeAgo(date: Date): string {\n  const now = new Date()\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)\n  \n  if (diffInSeconds < 60) return 'just now'\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`\n  if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`\n  \n  return date.toLocaleDateString()\n}"