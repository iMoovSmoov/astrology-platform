'use client'\n\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Badge } from '@/components/ui/badge'\nimport { BirthData } from '@/types/astrology'\nimport { cn } from '@/lib/utils'\nimport { CalendarIcon, MapPinIcon, ClockIcon, UserIcon } from 'lucide-react'\n\n// Validation schema\nconst birthDataSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100, 'Name too long'),\n  date: z.string().min(1, 'Birth date is required'),\n  time: z.object({\n    hour: z.number().min(0).max(23),\n    minute: z.number().min(0).max(59),\n  }),\n  location: z.object({\n    city: z.string().min(1, 'City is required'),\n    country: z.string().min(1, 'Country is required'),\n    latitude: z.number().min(-90).max(90),\n    longitude: z.number().min(-180).max(180),\n    timezone: z.string().min(1, 'Timezone is required'),\n  }),\n})\n\ntype BirthDataFormData = z.infer<typeof birthDataSchema>\n\ninterface BirthDataFormProps {\n  onSubmit: (data: BirthData) => void\n  initialData?: Partial<BirthData>\n  isLoading?: boolean\n  className?: string\n}\n\n// Common cities with coordinates for quick selection\nconst POPULAR_CITIES = [\n  { name: 'New York, NY, USA', lat: 40.7128, lng: -74.0060, timezone: 'America/New_York' },\n  { name: 'Los Angeles, CA, USA', lat: 34.0522, lng: -118.2437, timezone: 'America/Los_Angeles' },\n  { name: 'London, UK', lat: 51.5074, lng: -0.1278, timezone: 'Europe/London' },\n  { name: 'Paris, France', lat: 48.8566, lng: 2.3522, timezone: 'Europe/Paris' },\n  { name: 'Tokyo, Japan', lat: 35.6762, lng: 139.6503, timezone: 'Asia/Tokyo' },\n  { name: 'Sydney, Australia', lat: -33.8688, lng: 151.2093, timezone: 'Australia/Sydney' },\n  { name: 'Mumbai, India', lat: 19.0760, lng: 72.8777, timezone: 'Asia/Kolkata' },\n  { name: 'SÃ£o Paulo, Brazil', lat: -23.5505, lng: -46.6333, timezone: 'America/Sao_Paulo' },\n]\n\nexport function BirthDataForm({ onSubmit, initialData, isLoading = false, className }: BirthDataFormProps) {\n  const [selectedCity, setSelectedCity] = useState<string>('')\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [locationSearch, setLocationSearch] = useState('')\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors, isValid },\n  } = useForm<BirthDataFormData>({\n    resolver: zodResolver(birthDataSchema),\n    defaultValues: {\n      name: initialData?.name || '',\n      date: initialData?.date ? initialData.date.toISOString().split('T')[0] : '',\n      time: {\n        hour: initialData?.time?.hour || 12,\n        minute: initialData?.time?.minute || 0,\n      },\n      location: {\n        city: initialData?.location?.city || '',\n        country: initialData?.location?.country || '',\n        latitude: initialData?.location?.latitude || 0,\n        longitude: initialData?.location?.longitude || 0,\n        timezone: initialData?.location?.timezone || '',\n      },\n    },\n  })\n\n  const watchedValues = watch()\n\n  const handleCitySelect = (city: typeof POPULAR_CITIES[0]) => {\n    setValue('location.city', city.name.split(',')[0])\n    setValue('location.country', city.name.split(', ').slice(-1)[0])\n    setValue('location.latitude', city.lat)\n    setValue('location.longitude', city.lng)\n    setValue('location.timezone', city.timezone)\n    setSelectedCity(city.name)\n  }\n\n  const handleFormSubmit = (data: BirthDataFormData) => {\n    const birthData: BirthData = {\n      name: data.name,\n      date: new Date(data.date),\n      time: data.time,\n      location: data.location,\n    }\n    onSubmit(birthData)\n  }\n\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setValue('location.latitude', position.coords.latitude)\n          setValue('location.longitude', position.coords.longitude)\n          // You would typically reverse geocode here to get city/country\n          setValue('location.timezone', Intl.DateTimeFormat().resolvedOptions().timeZone)\n        },\n        (error) => {\n          console.error('Error getting location:', error)\n        }\n      )\n    }\n  }\n\n  return (\n    <Card className={cn('w-full max-w-2xl mx-auto', className)}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <UserIcon className=\"h-5 w-5\" />\n          <span>Birth Information</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n          {/* Name Field */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\" className=\"flex items-center space-x-2\">\n              <UserIcon className=\"h-4 w-4\" />\n              <span>Full Name</span>\n            </Label>\n            <Input\n              id=\"name\"\n              {...register('name')}\n              placeholder=\"Enter your full name\"\n              className={errors.name ? 'border-red-500' : ''}\n            />\n            {errors.name && (\n              <p className=\"text-sm text-red-500\">{errors.name.message}</p>\n            )}\n          </div>\n\n          {/* Date Field */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"date\" className=\"flex items-center space-x-2\">\n              <CalendarIcon className=\"h-4 w-4\" />\n              <span>Birth Date</span>\n            </Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              {...register('date')}\n              className={errors.date ? 'border-red-500' : ''}\n            />\n            {errors.date && (\n              <p className=\"text-sm text-red-500\">{errors.date.message}</p>\n            )}\n          </div>\n\n          {/* Time Fields */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <ClockIcon className=\"h-4 w-4\" />\n              <span>Birth Time</span>\n            </Label>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"hour\" className=\"text-sm text-muted-foreground\">\n                  Hour (24h)\n                </Label>\n                <Input\n                  id=\"hour\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"23\"\n                  {...register('time.hour', { valueAsNumber: true })}\n                  placeholder=\"12\"\n                  className={errors.time?.hour ? 'border-red-500' : ''}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"minute\" className=\"text-sm text-muted-foreground\">\n                  Minute\n                </Label>\n                <Input\n                  id=\"minute\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"59\"\n                  {...register('time.minute', { valueAsNumber: true })}\n                  placeholder=\"00\"\n                  className={errors.time?.minute ? 'border-red-500' : ''}\n                />\n              </div>\n            </div>\n            {(errors.time?.hour || errors.time?.minute) && (\n              <p className=\"text-sm text-red-500\">Please enter a valid time</p>\n            )}\n            <p className=\"text-xs text-muted-foreground\">\n              If you don't know your exact birth time, 12:00 PM is commonly used\n            </p>\n          </div>\n\n          {/* Location Section */}\n          <div className=\"space-y-4\">\n            <Label className=\"flex items-center space-x-2\">\n              <MapPinIcon className=\"h-4 w-4\" />\n              <span>Birth Location</span>\n            </Label>\n\n            {/* Popular Cities Quick Select */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm text-muted-foreground\">Quick Select Popular Cities</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {POPULAR_CITIES.map((city) => (\n                  <Badge\n                    key={city.name}\n                    variant={selectedCity === city.name ? 'default' : 'outline'}\n                    className=\"cursor-pointer hover:bg-primary/10\"\n                    onClick={() => handleCitySelect(city)}\n                  >\n                    {city.name.split(',')[0]}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            {/* Manual Location Entry */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"city\">City</Label>\n                <Input\n                  id=\"city\"\n                  {...register('location.city')}\n                  placeholder=\"New York\"\n                  className={errors.location?.city ? 'border-red-500' : ''}\n                />\n                {errors.location?.city && (\n                  <p className=\"text-sm text-red-500\">{errors.location.city.message}</p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"country\">Country</Label>\n                <Input\n                  id=\"country\"\n                  {...register('location.country')}\n                  placeholder=\"United States\"\n                  className={errors.location?.country ? 'border-red-500' : ''}\n                />\n                {errors.location?.country && (\n                  <p className=\"text-sm text-red-500\">{errors.location.country.message}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Advanced Location Options */}\n            <div className=\"space-y-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowAdvanced(!showAdvanced)}\n              >\n                {showAdvanced ? 'Hide' : 'Show'} Advanced Options\n              </Button>\n              \n              {showAdvanced && (\n                <div className=\"space-y-4 p-4 border rounded-lg bg-muted/50\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"latitude\">Latitude</Label>\n                      <Input\n                        id=\"latitude\"\n                        type=\"number\"\n                        step=\"any\"\n                        {...register('location.latitude', { valueAsNumber: true })}\n                        placeholder=\"40.7128\"\n                        className={errors.location?.latitude ? 'border-red-500' : ''}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"longitude\">Longitude</Label>\n                      <Input\n                        id=\"longitude\"\n                        type=\"number\"\n                        step=\"any\"\n                        {...register('location.longitude', { valueAsNumber: true })}\n                        placeholder=\"-74.0060\"\n                        className={errors.location?.longitude ? 'border-red-500' : ''}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Input\n                      id=\"timezone\"\n                      {...register('location.timezone')}\n                      placeholder=\"America/New_York\"\n                      className={errors.location?.timezone ? 'border-red-500' : ''}\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={getCurrentLocation}\n                  >\n                    Use Current Location\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Form Summary */}\n          {watchedValues.name && watchedValues.date && watchedValues.location.city && (\n            <div className=\"p-4 bg-muted/50 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Birth Chart Summary</h4>\n              <div className=\"text-sm space-y-1\">\n                <p><strong>Name:</strong> {watchedValues.name}</p>\n                <p><strong>Date:</strong> {new Date(watchedValues.date).toLocaleDateString()}</p>\n                <p><strong>Time:</strong> {watchedValues.time.hour.toString().padStart(2, '0')}:{watchedValues.time.minute.toString().padStart(2, '0')}</p>\n                <p><strong>Location:</strong> {watchedValues.location.city}, {watchedValues.location.country}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            variant=\"cosmic\"\n            size=\"lg\"\n            className=\"w-full\"\n            disabled={!isValid || isLoading}\n          >\n            {isLoading ? 'Calculating Chart...' : 'Generate Birth Chart'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}