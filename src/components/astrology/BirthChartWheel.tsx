'use client'\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport * as d3 from 'd3'\nimport { BirthChart, PlanetaryPosition, HouseCusp, Planet, ZodiacSign, PLANET_INFO, ZODIAC_SIGNS_INFO } from '@/types/astrology'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { cn, formatZodiacPosition } from '@/lib/utils'\n\ninterface BirthChartWheelProps {\n  chart: BirthChart\n  size?: number\n  className?: string\n  showAspects?: boolean\n  showHouseNumbers?: boolean\n  theme?: 'light' | 'dark' | 'cosmic'\n}\n\nexport function BirthChartWheel({\n  chart,\n  size = 400,\n  className,\n  showAspects = true,\n  showHouseNumbers = true,\n  theme = 'cosmic'\n}: BirthChartWheelProps) {\n  const svgRef = useRef<SVGSVGElement>(null)\n  const [selectedPlanet, setSelectedPlanet] = useState<Planet | null>(null)\n  const [hoveredElement, setHoveredElement] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (!svgRef.current || !chart) return\n\n    const svg = d3.select(svgRef.current)\n    svg.selectAll('*').remove()\n\n    const margin = 40\n    const radius = (size - margin * 2) / 2\n    const centerX = size / 2\n    const centerY = size / 2\n\n    // Create main group\n    const g = svg\n      .append('g')\n      .attr('transform', `translate(${centerX}, ${centerY})`)\n\n    // Draw zodiac wheel\n    drawZodiacWheel(g, radius, theme)\n    \n    // Draw house divisions\n    drawHouses(g, chart.houses, radius, showHouseNumbers, theme)\n    \n    // Draw aspect lines (if enabled)\n    if (showAspects) {\n      drawAspects(g, chart.aspects, chart.planets, radius * 0.7, theme)\n    }\n    \n    // Draw planets\n    drawPlanets(g, chart.planets, radius, theme, setSelectedPlanet, setHoveredElement)\n    \n    // Draw ascendant and midheaven markers\n    drawAngles(g, chart.ascendant, chart.midheaven, radius, theme)\n\n  }, [chart, size, showAspects, showHouseNumbers, theme])\n\n  const getThemeColors = (theme: string) => {\n    switch (theme) {\n      case 'dark':\n        return {\n          background: '#1a1a1a',\n          text: '#ffffff',\n          zodiac: '#4a5568',\n          house: '#2d3748',\n          planet: '#e2e8f0',\n          aspect: '#718096'\n        }\n      case 'cosmic':\n        return {\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n          text: '#ffffff',\n          zodiac: '#8b5cf6',\n          house: '#6366f1',\n          planet: '#fbbf24',\n          aspect: '#a78bfa'\n        }\n      default: // light\n        return {\n          background: '#ffffff',\n          text: '#1a202c',\n          zodiac: '#e2e8f0',\n          house: '#f7fafc',\n          planet: '#2d3748',\n          aspect: '#a0aec0'\n        }\n    }\n  }\n\n  const selectedPlanetInfo = selectedPlanet ? chart.planets.find(p => p.planet === selectedPlanet) : null\n\n  return (\n    <div className={cn('flex flex-col space-y-4', className)}>\n      <Card className=\"overflow-hidden\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Birth Chart</span>\n            <div className=\"flex space-x-2\">\n              <Badge variant=\"outline\">\n                {chart.houseSystem}\n              </Badge>\n              <Badge variant=\"secondary\">\n                Tropical\n              </Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"relative\">\n            <svg\n              ref={svgRef}\n              width={size}\n              height={size}\n              className=\"mx-auto\"\n              style={{\n                background: theme === 'cosmic' \n                  ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n                  : theme === 'dark' \n                  ? '#1a1a1a' \n                  : '#ffffff'\n              }}\n            />\n            \n            {/* Legend */}\n            <div className=\"absolute top-4 left-4 space-y-2\">\n              <div className=\"text-xs font-medium text-white/80\">\n                {chart.birthData.name && (\n                  <div>{chart.birthData.name}</div>\n                )}\n                <div>\n                  {chart.birthData.date.toLocaleDateString()}\n                </div>\n                <div>\n                  {chart.birthData.time.hour.toString().padStart(2, '0')}:\n                  {chart.birthData.time.minute.toString().padStart(2, '0')}\n                </div>\n                {chart.birthData.location.city && (\n                  <div>{chart.birthData.location.city}</div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Planet Information Panel */}\n      {selectedPlanetInfo && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <span style={{ color: PLANET_INFO[selectedPlanet!].color }}>\n                {PLANET_INFO[selectedPlanet!].symbol}\n              </span>\n              <span className=\"capitalize\">{selectedPlanet}</span>\n              <Badge \n                variant={getElementVariant(ZODIAC_SIGNS_INFO[selectedPlanetInfo.sign].element)}\n              >\n                {selectedPlanetInfo.sign}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <div className=\"font-medium\">Position</div>\n                <div>{formatZodiacPosition(selectedPlanetInfo.degree, selectedPlanetInfo.minute, selectedPlanetInfo.sign)}</div>\n              </div>\n              <div>\n                <div className=\"font-medium\">House</div>\n                <div>{selectedPlanetInfo.house ? `${selectedPlanetInfo.house}${getOrdinalSuffix(selectedPlanetInfo.house)} House` : 'Unknown'}</div>\n              </div>\n              <div>\n                <div className=\"font-medium\">Element</div>\n                <div className=\"capitalize\">{ZODIAC_SIGNS_INFO[selectedPlanetInfo.sign].element}</div>\n              </div>\n              <div>\n                <div className=\"font-medium\">Modality</div>\n                <div className=\"capitalize\">{ZODIAC_SIGNS_INFO[selectedPlanetInfo.sign].modality}</div>\n              </div>\n              {selectedPlanetInfo.retrograde && (\n                <div className=\"col-span-2\">\n                  <Badge variant=\"destructive\">Retrograde</Badge>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n\n// Helper functions for drawing chart elements\nfunction drawZodiacWheel(g: d3.Selection<SVGGElement, unknown, null, undefined>, radius: number, theme: string) {\n  const zodiacSigns = Object.entries(ZODIAC_SIGNS_INFO)\n  \n  zodiacSigns.forEach(([sign, info], index) => {\n    const startAngle = (index * 30 - 90) * (Math.PI / 180)\n    const endAngle = ((index + 1) * 30 - 90) * (Math.PI / 180)\n    \n    // Draw zodiac segment\n    const arc = d3.arc()\n      .innerRadius(radius * 0.85)\n      .outerRadius(radius)\n      .startAngle(startAngle)\n      .endAngle(endAngle)\n    \n    g.append('path')\n      .attr('d', arc as any)\n      .attr('fill', theme === 'cosmic' ? '#8b5cf6' : theme === 'dark' ? '#4a5568' : '#e2e8f0')\n      .attr('stroke', theme === 'cosmic' ? '#6366f1' : theme === 'dark' ? '#2d3748' : '#cbd5e0')\n      .attr('stroke-width', 1)\n    \n    // Add zodiac symbol\n    const symbolAngle = (index * 30 + 15 - 90) * (Math.PI / 180)\n    const symbolRadius = radius * 0.925\n    const symbolX = Math.cos(symbolAngle) * symbolRadius\n    const symbolY = Math.sin(symbolAngle) * symbolRadius\n    \n    g.append('text')\n      .attr('x', symbolX)\n      .attr('y', symbolY)\n      .attr('text-anchor', 'middle')\n      .attr('dominant-baseline', 'central')\n      .attr('font-size', '16px')\n      .attr('font-weight', 'bold')\n      .attr('fill', theme === 'light' ? '#1a202c' : '#ffffff')\n      .text(info.symbol)\n  })\n}\n\nfunction drawHouses(g: d3.Selection<SVGGElement, unknown, null, undefined>, houses: HouseCusp[], radius: number, showNumbers: boolean, theme: string) {\n  houses.forEach((house, index) => {\n    const angle = (house.longitude - 90) * (Math.PI / 180)\n    \n    // Draw house cusp line\n    g.append('line')\n      .attr('x1', Math.cos(angle) * radius * 0.3)\n      .attr('y1', Math.sin(angle) * radius * 0.3)\n      .attr('x2', Math.cos(angle) * radius * 0.85)\n      .attr('y2', Math.sin(angle) * radius * 0.85)\n      .attr('stroke', theme === 'cosmic' ? '#6366f1' : theme === 'dark' ? '#2d3748' : '#a0aec0')\n      .attr('stroke-width', house.house === 1 || house.house === 10 ? 3 : 1)\n    \n    if (showNumbers) {\n      // Calculate position for house number\n      const nextHouse = houses[(index + 1) % houses.length]\n      const midAngle = ((house.longitude + nextHouse.longitude) / 2 - 90) * (Math.PI / 180)\n      const numberRadius = radius * 0.6\n      const numberX = Math.cos(midAngle) * numberRadius\n      const numberY = Math.sin(midAngle) * numberRadius\n      \n      g.append('text')\n        .attr('x', numberX)\n        .attr('y', numberY)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'central')\n        .attr('font-size', '14px')\n        .attr('font-weight', 'bold')\n        .attr('fill', theme === 'light' ? '#4a5568' : '#e2e8f0')\n        .text(house.house.toString())\n    }\n  })\n}\n\nfunction drawPlanets(g: d3.Selection<SVGGElement, unknown, null, undefined>, planets: PlanetaryPosition[], radius: number, theme: string, onPlanetClick: (planet: Planet) => void, onHover: (element: string | null) => void) {\n  planets.forEach((planet) => {\n    const angle = (planet.longitude - 90) * (Math.PI / 180)\n    const planetRadius = radius * 0.75\n    const x = Math.cos(angle) * planetRadius\n    const y = Math.sin(angle) * planetRadius\n    \n    // Planet circle background\n    g.append('circle')\n      .attr('cx', x)\n      .attr('cy', y)\n      .attr('r', 12)\n      .attr('fill', theme === 'cosmic' ? '#1a1a1a' : theme === 'dark' ? '#2d3748' : '#ffffff')\n      .attr('stroke', PLANET_INFO[planet.planet].color)\n      .attr('stroke-width', 2)\n      .style('cursor', 'pointer')\n      .on('click', () => onPlanetClick(planet.planet))\n      .on('mouseenter', () => onHover(planet.planet))\n      .on('mouseleave', () => onHover(null))\n    \n    // Planet symbol\n    g.append('text')\n      .attr('x', x)\n      .attr('y', y)\n      .attr('text-anchor', 'middle')\n      .attr('dominant-baseline', 'central')\n      .attr('font-size', '14px')\n      .attr('font-weight', 'bold')\n      .attr('fill', PLANET_INFO[planet.planet].color)\n      .style('cursor', 'pointer')\n      .text(PLANET_INFO[planet.planet].symbol)\n      .on('click', () => onPlanetClick(planet.planet))\n      .on('mouseenter', () => onHover(planet.planet))\n      .on('mouseleave', () => onHover(null))\n    \n    // Retrograde indicator\n    if (planet.retrograde) {\n      g.append('text')\n        .attr('x', x + 15)\n        .attr('y', y - 10)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'central')\n        .attr('font-size', '10px')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#ef4444')\n        .text('R')\n    }\n  })\n}\n\nfunction drawAspects(g: d3.Selection<SVGGElement, unknown, null, undefined>, aspects: any[], planets: PlanetaryPosition[], radius: number, theme: string) {\n  aspects.forEach((aspect) => {\n    const planet1 = planets.find(p => p.planet === aspect.planet1)\n    const planet2 = planets.find(p => p.planet === aspect.planet2)\n    \n    if (!planet1 || !planet2) return\n    \n    const angle1 = (planet1.longitude - 90) * (Math.PI / 180)\n    const angle2 = (planet2.longitude - 90) * (Math.PI / 180)\n    \n    const x1 = Math.cos(angle1) * radius\n    const y1 = Math.sin(angle1) * radius\n    const x2 = Math.cos(angle2) * radius\n    const y2 = Math.sin(angle2) * radius\n    \n    // Determine aspect color and style\n    let strokeColor = '#a0aec0'\n    let strokeWidth = 1\n    let strokeDasharray = 'none'\n    \n    switch (aspect.type) {\n      case 'conjunction':\n        strokeColor = '#fbbf24'\n        strokeWidth = 2\n        break\n      case 'opposition':\n        strokeColor = '#ef4444'\n        strokeWidth = 2\n        break\n      case 'trine':\n        strokeColor = '#10b981'\n        strokeWidth = 2\n        break\n      case 'square':\n        strokeColor = '#f59e0b'\n        strokeWidth = 2\n        break\n      case 'sextile':\n        strokeColor = '#3b82f6'\n        strokeWidth = 1\n        break\n      default:\n        strokeDasharray = '3,3'\n    }\n    \n    g.append('line')\n      .attr('x1', x1)\n      .attr('y1', y1)\n      .attr('x2', x2)\n      .attr('y2', y2)\n      .attr('stroke', strokeColor)\n      .attr('stroke-width', strokeWidth)\n      .attr('stroke-dasharray', strokeDasharray)\n      .attr('opacity', 0.6)\n  })\n}\n\nfunction drawAngles(g: d3.Selection<SVGGElement, unknown, null, undefined>, ascendant: PlanetaryPosition, midheaven: PlanetaryPosition, radius: number, theme: string) {\n  // Draw Ascendant (AC)\n  const ascAngle = (ascendant.longitude - 90) * (Math.PI / 180)\n  const ascX = Math.cos(ascAngle) * radius * 0.9\n  const ascY = Math.sin(ascAngle) * radius * 0.9\n  \n  g.append('text')\n    .attr('x', ascX)\n    .attr('y', ascY)\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('font-size', '12px')\n    .attr('font-weight', 'bold')\n    .attr('fill', theme === 'light' ? '#1a202c' : '#ffffff')\n    .text('AC')\n  \n  // Draw Midheaven (MC)\n  const mcAngle = (midheaven.longitude - 90) * (Math.PI / 180)\n  const mcX = Math.cos(mcAngle) * radius * 0.9\n  const mcY = Math.sin(mcAngle) * radius * 0.9\n  \n  g.append('text')\n    .attr('x', mcX)\n    .attr('y', mcY)\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('font-size', '12px')\n    .attr('font-weight', 'bold')\n    .attr('fill', theme === 'light' ? '#1a202c' : '#ffffff')\n    .text('MC')\n}\n\n// Helper functions\nfunction getElementVariant(element: string): 'fire' | 'earth' | 'air' | 'water' | 'default' {\n  switch (element.toLowerCase()) {\n    case 'fire': return 'fire'\n    case 'earth': return 'earth'\n    case 'air': return 'air'\n    case 'water': return 'water'\n    default: return 'default'\n  }\n}\n\nfunction getOrdinalSuffix(num: number): string {\n  const j = num % 10\n  const k = num % 100\n  if (j === 1 && k !== 11) return 'st'\n  if (j === 2 && k !== 12) return 'nd'\n  if (j === 3 && k !== 13) return 'rd'\n  return 'th'\n}