/**\n * Spiritual Dating Compatibility System\n * Advanced compatibility matching using multiple spiritual tools\n */\n\nimport { SpiritualProfile, SpiritualMatch, CompatibilityBreakdown, MatchType } from '@/types/spiritual'\nimport { BirthChart } from '@/types/astrology'\nimport { NumerologyResults } from '@/lib/numerology/calculator'\nimport { ChakraAssessment } from '@/types/spiritual'\n\n// ============================================================================\n// COMPATIBILITY CALCULATOR\n// ============================================================================\n\nexport class SpiritualCompatibilityCalculator {\n  private static instance: SpiritualCompatibilityCalculator\n\n  public static getInstance(): SpiritualCompatibilityCalculator {\n    if (!SpiritualCompatibilityCalculator.instance) {\n      SpiritualCompatibilityCalculator.instance = new SpiritualCompatibilityCalculator()\n    }\n    return SpiritualCompatibilityCalculator.instance\n  }\n\n  /**\n   * Calculate comprehensive spiritual compatibility\n   */\n  public calculateCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): CompatibilityBreakdown {\n    const astrologyScore = this.calculateAstrologyCompatibility(profile1, profile2)\n    const numerologyScore = this.calculateNumerologyCompatibility(profile1, profile2)\n    const interestsScore = this.calculateInterestsCompatibility(profile1, profile2)\n    const practicesScore = this.calculatePracticesCompatibility(profile1, profile2)\n    const chakrasScore = this.calculateChakraCompatibility(profile1, profile2)\n    const lifestyleScore = this.calculateLifestyleCompatibility(profile1, profile2)\n\n    // Calculate weighted overall score\n    const weights = {\n      astrology: profile1.compatibility_settings?.weight_astrology || 25,\n      numerology: profile1.compatibility_settings?.weight_numerology || 20,\n      interests: profile1.compatibility_settings?.weight_interests || 20,\n      practices: profile1.compatibility_settings?.weight_practices || 15,\n      chakras: 10,\n      lifestyle: 10\n    }\n\n    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0)\n    const overall = (\n      (astrologyScore * weights.astrology +\n       numerologyScore * weights.numerology +\n       interestsScore * weights.interests +\n       practicesScore * weights.practices +\n       chakrasScore * weights.chakras +\n       lifestyleScore * weights.lifestyle) / totalWeight\n    )\n\n    const strengths = this.identifyStrengths({\n      astrology: astrologyScore,\n      numerology: numerologyScore,\n      interests: interestsScore,\n      practices: practicesScore,\n      chakras: chakrasScore,\n      lifestyle: lifestyleScore\n    })\n\n    const challenges = this.identifyChallenges({\n      astrology: astrologyScore,\n      numerology: numerologyScore,\n      interests: interestsScore,\n      practices: practicesScore,\n      chakras: chakrasScore,\n      lifestyle: lifestyleScore\n    })\n\n    const recommendations = this.generateRecommendations(profile1, profile2, {\n      astrology: astrologyScore,\n      numerology: numerologyScore,\n      interests: interestsScore,\n      practices: practicesScore,\n      chakras: chakrasScore,\n      lifestyle: lifestyleScore\n    })\n\n    return {\n      overall: Math.round(overall),\n      astrology: Math.round(astrologyScore),\n      numerology: Math.round(numerologyScore),\n      interests: Math.round(interestsScore),\n      practices: Math.round(practicesScore),\n      chakras: Math.round(chakrasScore),\n      lifestyle: Math.round(lifestyleScore),\n      strengths,\n      challenges,\n      recommendations\n    }\n  }\n\n  /**\n   * Calculate astrology compatibility\n   */\n  private calculateAstrologyCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): number {\n    if (!profile1.astrology?.birth_chart || !profile2.astrology?.birth_chart) {\n      return 50 // Neutral score if no astrology data\n    }\n\n    const chart1 = profile1.astrology.birth_chart\n    const chart2 = profile2.astrology.birth_chart\n\n    let score = 0\n    let factors = 0\n\n    // Sun sign compatibility\n    const sunCompatibility = this.getElementCompatibility(\n      this.getSignElement(chart1.sun.sign),\n      this.getSignElement(chart2.sun.sign)\n    )\n    score += sunCompatibility * 3\n    factors += 3\n\n    // Moon sign compatibility (emotional compatibility)\n    const moonCompatibility = this.getElementCompatibility(\n      this.getSignElement(chart1.moon.sign),\n      this.getSignElement(chart2.moon.sign)\n    )\n    score += moonCompatibility * 4\n    factors += 4\n\n    // Venus compatibility (love style)\n    if (chart1.venus && chart2.venus) {\n      const venusCompatibility = this.getElementCompatibility(\n        this.getSignElement(chart1.venus.sign),\n        this.getSignElement(chart2.venus.sign)\n      )\n      score += venusCompatibility * 3\n      factors += 3\n    }\n\n    // Mars compatibility (passion/energy)\n    if (chart1.mars && chart2.mars) {\n      const marsCompatibility = this.getElementCompatibility(\n        this.getSignElement(chart1.mars.sign),\n        this.getSignElement(chart2.mars.sign)\n      )\n      score += marsCompatibility * 2\n      factors += 2\n    }\n\n    return factors > 0 ? (score / factors) * 20 : 50\n  }\n\n  /**\n   * Calculate numerology compatibility\n   */\n  private calculateNumerologyCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): number {\n    if (!profile1.numerology || !profile2.numerology) {\n      return 50 // Neutral score if no numerology data\n    }\n\n    let score = 0\n    let factors = 0\n\n    // Life path compatibility\n    const lifePathScore = this.getNumberCompatibility(\n      profile1.numerology.life_path_number,\n      profile2.numerology.life_path_number\n    )\n    score += lifePathScore * 4\n    factors += 4\n\n    // Destiny number compatibility\n    const destinyScore = this.getNumberCompatibility(\n      profile1.numerology.destiny_number,\n      profile2.numerology.destiny_number\n    )\n    score += destinyScore * 3\n    factors += 3\n\n    // Soul urge compatibility\n    const soulUrgeScore = this.getNumberCompatibility(\n      profile1.numerology.soul_urge_number,\n      profile2.numerology.soul_urge_number\n    )\n    score += soulUrgeScore * 3\n    factors += 3\n\n    return factors > 0 ? (score / factors) * 20 : 50\n  }\n\n  /**\n   * Calculate interests compatibility\n   */\n  private calculateInterestsCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): number {\n    const commonInterests = profile1.interests.filter(interest => \n      profile2.interests.includes(interest)\n    )\n    \n    const totalInterests = new Set([...profile1.interests, ...profile2.interests]).size\n    const compatibilityRatio = commonInterests.length / Math.max(totalInterests, 1)\n    \n    return Math.min(compatibilityRatio * 100, 100)\n  }\n\n  /**\n   * Calculate practices compatibility\n   */\n  private calculatePracticesCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): number {\n    const commonPractices = profile1.practices.filter(practice => \n      profile2.practices.includes(practice)\n    )\n    \n    const totalPractices = new Set([...profile1.practices, ...profile2.practices]).size\n    const compatibilityRatio = commonPractices.length / Math.max(totalPractices, 1)\n    \n    return Math.min(compatibilityRatio * 100, 100)\n  }\n\n  /**\n   * Calculate chakra compatibility\n   */\n  private calculateChakraCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): number {\n    if (!profile1.chakras || !profile2.chakras) {\n      return 50 // Neutral score if no chakra data\n    }\n\n    // Compare dominant and blocked chakras\n    const commonDominant = profile1.chakras.dominant_chakras.filter(chakra => \n      profile2.chakras!.dominant_chakras.includes(chakra)\n    )\n    \n    const commonBlocked = profile1.chakras.blocked_chakras.filter(chakra => \n      profile2.chakras!.blocked_chakras.includes(chakra)\n    )\n\n    // Higher score for complementary chakras (one's strength balances other's weakness)\n    const complementary = profile1.chakras.dominant_chakras.filter(chakra => \n      profile2.chakras!.blocked_chakras.includes(chakra)\n    ).length + profile2.chakras.dominant_chakras.filter(chakra => \n      profile1.chakras!.blocked_chakras.includes(chakra)\n    ).length\n\n    const score = (commonDominant.length * 15) + (complementary * 20) - (commonBlocked.length * 5)\n    return Math.max(Math.min(score + 50, 100), 0)\n  }\n\n  /**\n   * Calculate lifestyle compatibility\n   */\n  private calculateLifestyleCompatibility(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): number {\n    if (!profile1.dating_preferences || !profile2.dating_preferences) {\n      return 50\n    }\n\n    const lifestyle1 = profile1.dating_preferences.lifestyle_choices\n    const lifestyle2 = profile2.dating_preferences.lifestyle_choices\n    \n    const commonChoices = lifestyle1.filter(choice => lifestyle2.includes(choice))\n    const totalChoices = new Set([...lifestyle1, ...lifestyle2]).size\n    \n    const compatibilityRatio = commonChoices.length / Math.max(totalChoices, 1)\n    return Math.min(compatibilityRatio * 100, 100)\n  }\n\n  /**\n   * Get element compatibility score\n   */\n  private getElementCompatibility(element1: string, element2: string): number {\n    const compatibilityMatrix: Record<string, Record<string, number>> = {\n      fire: { fire: 4, air: 5, earth: 2, water: 1 },\n      earth: { earth: 4, water: 5, fire: 2, air: 1 },\n      air: { air: 4, fire: 5, water: 2, earth: 1 },\n      water: { water: 4, earth: 5, air: 2, fire: 1 }\n    }\n    \n    return compatibilityMatrix[element1]?.[element2] || 3\n  }\n\n  /**\n   * Get sign element\n   */\n  private getSignElement(sign: string): string {\n    const elements: Record<string, string> = {\n      'Aries': 'fire', 'Leo': 'fire', 'Sagittarius': 'fire',\n      'Taurus': 'earth', 'Virgo': 'earth', 'Capricorn': 'earth',\n      'Gemini': 'air', 'Libra': 'air', 'Aquarius': 'air',\n      'Cancer': 'water', 'Scorpio': 'water', 'Pisces': 'water'\n    }\n    return elements[sign] || 'earth'\n  }\n\n  /**\n   * Get numerology number compatibility\n   */\n  private getNumberCompatibility(num1: number, num2: number): number {\n    // Simplified numerology compatibility matrix\n    const compatibilityMatrix: Record<number, number[]> = {\n      1: [1, 5, 7], 2: [2, 4, 8], 3: [3, 6, 9],\n      4: [2, 4, 8], 5: [1, 5, 7], 6: [3, 6, 9],\n      7: [1, 5, 7], 8: [2, 4, 8], 9: [3, 6, 9],\n      11: [11, 22, 33], 22: [11, 22, 33], 33: [11, 22, 33]\n    }\n\n    if (num1 === num2) return 5 // Perfect match\n    if (compatibilityMatrix[num1]?.includes(num2)) return 4 // High compatibility\n    return 2 // Lower compatibility\n  }\n\n  /**\n   * Identify relationship strengths\n   */\n  private identifyStrengths(scores: Record<string, number>): string[] {\n    const strengths: string[] = []\n    \n    if (scores.astrology >= 75) {\n      strengths.push('Strong astrological harmony and cosmic connection')\n    }\n    if (scores.numerology >= 75) {\n      strengths.push('Aligned life paths and spiritual purposes')\n    }\n    if (scores.interests >= 75) {\n      strengths.push('Shared spiritual interests and passions')\n    }\n    if (scores.practices >= 75) {\n      strengths.push('Compatible spiritual practices and routines')\n    }\n    if (scores.chakras >= 75) {\n      strengths.push('Balanced and complementary energy centers')\n    }\n    if (scores.lifestyle >= 75) {\n      strengths.push('Aligned lifestyle choices and values')\n    }\n\n    if (strengths.length === 0) {\n      strengths.push('Opportunity for growth and learning together')\n    }\n\n    return strengths\n  }\n\n  /**\n   * Identify potential challenges\n   */\n  private identifyChallenges(scores: Record<string, number>): string[] {\n    const challenges: string[] = []\n    \n    if (scores.astrology < 50) {\n      challenges.push('Different astrological energies may require understanding')\n    }\n    if (scores.numerology < 50) {\n      challenges.push('Varying life path approaches need communication')\n    }\n    if (scores.interests < 50) {\n      challenges.push('Different spiritual interests could expand horizons')\n    }\n    if (scores.practices < 50) {\n      challenges.push('Diverse practices offer learning opportunities')\n    }\n    if (scores.chakras < 50) {\n      challenges.push('Energy differences can create balance when understood')\n    }\n    if (scores.lifestyle < 50) {\n      challenges.push('Lifestyle differences may need compromise')\n    }\n\n    return challenges\n  }\n\n  /**\n   * Generate relationship recommendations\n   */\n  private generateRecommendations(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile,\n    scores: Record<string, number>\n  ): string[] {\n    const recommendations: string[] = []\n    \n    if (scores.astrology < 60) {\n      recommendations.push('Explore each other\\'s birth charts together to understand cosmic differences')\n    }\n    \n    if (scores.numerology < 60) {\n      recommendations.push('Share your numerology profiles and discuss life path goals')\n    }\n    \n    if (scores.interests < 60) {\n      recommendations.push('Introduce each other to your favorite spiritual practices')\n    }\n    \n    if (scores.practices < 60) {\n      recommendations.push('Try meditating or practicing spiritual rituals together')\n    }\n    \n    if (scores.chakras < 60) {\n      recommendations.push('Practice chakra balancing exercises as a couple')\n    }\n    \n    // Always include general recommendations\n    recommendations.push('Communicate openly about your spiritual journeys')\n    recommendations.push('Respect each other\\'s spiritual beliefs and practices')\n    recommendations.push('Create shared spiritual goals and intentions')\n    \n    return recommendations\n  }\n\n  /**\n   * Determine match type based on compatibility\n   */\n  public determineMatchType(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile,\n    compatibility: CompatibilityBreakdown\n  ): MatchType {\n    const seeking1 = profile1.seeking\n    const seeking2 = profile2.seeking\n    \n    // Check for mutual romantic interest\n    if (seeking1.includes('romantic_partner') && seeking2.includes('romantic_partner')) {\n      return 'romantic'\n    }\n    \n    // Check for spiritual partnership\n    if (seeking1.includes('spiritual_guide') || seeking2.includes('spiritual_guide')) {\n      return 'spiritual_partnership'\n    }\n    \n    // Check for study/practice partnership\n    if (seeking1.includes('study_group') || seeking1.includes('practice_partner') ||\n        seeking2.includes('study_group') || seeking2.includes('practice_partner')) {\n      return 'study_partner'\n    }\n    \n    // Check for mentorship\n    if (seeking1.includes('mentorship') || seeking2.includes('mentorship')) {\n      return 'mentor_student'\n    }\n    \n    // Default to friendship\n    return 'friendship'\n  }\n}\n\n// ============================================================================\n// SPIRITUAL MATCHING SERVICE\n// ============================================================================\n\nexport class SpiritualMatchingService {\n  private static instance: SpiritualMatchingService\n  private compatibilityCalculator: SpiritualCompatibilityCalculator\n\n  constructor() {\n    this.compatibilityCalculator = SpiritualCompatibilityCalculator.getInstance()\n  }\n\n  public static getInstance(): SpiritualMatchingService {\n    if (!SpiritualMatchingService.instance) {\n      SpiritualMatchingService.instance = new SpiritualMatchingService()\n    }\n    return SpiritualMatchingService.instance\n  }\n\n  /**\n   * Find potential matches for a user\n   */\n  public findMatches(\n    userProfile: SpiritualProfile,\n    candidateProfiles: SpiritualProfile[],\n    minCompatibility: number = 60\n  ): SpiritualMatch[] {\n    const matches: SpiritualMatch[] = []\n\n    candidateProfiles.forEach(candidate => {\n      if (candidate.id === userProfile.id) return // Skip self\n      \n      const compatibility = this.compatibilityCalculator.calculateCompatibility(\n        userProfile,\n        candidate\n      )\n      \n      if (compatibility.overall >= minCompatibility) {\n        const matchType = this.compatibilityCalculator.determineMatchType(\n          userProfile,\n          candidate,\n          compatibility\n        )\n        \n        matches.push({\n          id: `match_${userProfile.id}_${candidate.id}`,\n          user1_id: userProfile.id,\n          user2_id: candidate.id,\n          compatibility_score: compatibility.overall,\n          compatibility_breakdown: compatibility,\n          match_type: matchType,\n          status: 'pending',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n      }\n    })\n\n    // Sort by compatibility score (highest first)\n    return matches.sort((a, b) => b.compatibility_score - a.compatibility_score)\n  }\n\n  /**\n   * Get detailed compatibility analysis\n   */\n  public getCompatibilityAnalysis(\n    profile1: SpiritualProfile,\n    profile2: SpiritualProfile\n  ): CompatibilityBreakdown {\n    return this.compatibilityCalculator.calculateCompatibility(profile1, profile2)\n  }\n}\n\n// Export singleton instances\nexport const spiritualCompatibility = SpiritualCompatibilityCalculator.getInstance()\nexport const spiritualMatching = SpiritualMatchingService.getInstance()"